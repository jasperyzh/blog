---
// import { getCollection, CollectionEntry } from "astro:content";
// component imports
// import MainLayout from "../../layouts/MainLayout.astro";
// import PostCard from "../../components/PostCard.astro";
// utils
// import { slugify, formatBlogPosts } from "../../js/utils";
/* export async function getStaticPaths() {
  return [
    {
      params: { category: slugify("Reference Docs") },
      props: { name: "Reference Docs" },
    },
    {
      params: { category: slugify("General") },
      props: { name: "General" },
    },
    {
      params: { category: slugify("CSS") },
      props: { name: "CSS" },
    },
    {
      params: { category: slugify("Astro") },
      props: { name: "Astro" },
    },
  ];
}
const { category } = Astro.params;
const { name } = Astro.props;
const allPosts = await getCollection("blog");
const formattedPosts: CollectionEntry<"blog">[] = formatBlogPosts(allPosts);
const catPosts = formattedPosts.filter(
  (post) => slugify(post.data.category) === category
); */
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
// import Layout from '@layouts/Default.astro';
// import BlogList from '@components/blog/BlogList.astro';
// import { Button } from '@eliancodes/brutal-ui';

export async function getStaticPaths() {
  const allPosts = await getCollection("posts").then((collection) =>
    collection.reverse()
  );

  console.log(allPosts);

  const tags: string[] = [];

  allPosts.forEach((post) => {
    post.data.tags.forEach((tag) => {
      tags.push(tag.toLowerCase());
    });
  });

  return Array.from(new Set(tags)).map((tag) => {
    return {
      params: { tag },
      props: {
        tag,
        blogposts: allPosts.filter((post) =>
          post.data.tags.map((tag) => tag.toLowerCase()).includes(tag)
        ),
      },
    };
  });
}

interface Props {
  tag: string;
  blogposts: CollectionEntry<"posts">[];
}

const { tag, blogposts } = Astro.props;
---

<!-- <MainLayout title={name}>
  <section class="container" aria-label={`Posts about ${name}`}>
    <h1 class="h1">Posts about <span>{name}</span></h1>
    <div class="post-container">
      {
        catPosts.map((post) => (
          <PostCard data={post.data} url={post.slug} tagType="h2" />
        ))
      }
    </div>
  </section>
</MainLayout>
 -->
<Layout>
  <!-- 
  title={`Blog: ${tag}`}
  description={`Brutal Blog | All posts tagged with ${tag}`}
  pageTitle={`Brutal Blog |Â Blogposts tagged with ${tag}`}
   -->
  <main>
    <div>
      <!-- <Button href="/blog/">&larr; Back to blog</Button> -->
    </div>
    <!-- <BlogList posts={blogposts} /> -->
    <pre>posts={blogposts}</pre>
  </main>
</Layout>
